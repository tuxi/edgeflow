// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v6.33.0
// source: market_data.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Ticker 数据 (价格网关使用)
type TickerUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstId     string  `protobuf:"bytes,1,opt,name=inst_id,json=instId,proto3" json:"inst_id,omitempty"`            // 币种符号，例如 BTC-USDT
	LastPrice  string  `protobuf:"bytes,2,opt,name=last_price,json=lastPrice,proto3" json:"last_price,omitempty"`   // 最新成交价格
	Vol_24H    string  `protobuf:"bytes,3,opt,name=vol_24h,json=vol24h,proto3" json:"vol_24h,omitempty"`            // 24小时成交量 (单位币)
	VolCcy_24H string  `protobuf:"bytes,4,opt,name=vol_ccy_24h,json=volCcy24h,proto3" json:"vol_ccy_24h,omitempty"` // 24小时成交额 (单位计价币)
	High_24H   string  `protobuf:"bytes,5,opt,name=high_24h,json=high24h,proto3" json:"high_24h,omitempty"`         // 24小时最高价
	Low_24H    string  `protobuf:"bytes,6,opt,name=low_24h,json=low24h,proto3" json:"low_24h,omitempty"`            // 24小时最低价
	Open_24H   string  `protobuf:"bytes,7,opt,name=open_24h,json=open24h,proto3" json:"open_24h,omitempty"`         // 24小时开盘价格
	Change_24H float64 `protobuf:"fixed64,8,opt,name=change_24h,json=change24h,proto3" json:"change_24h,omitempty"` // 24小时涨跌幅（%）
	AskPx      string  `protobuf:"bytes,9,opt,name=ask_px,json=askPx,proto3" json:"ask_px,omitempty"`               // 卖一价
	AskSz      string  `protobuf:"bytes,10,opt,name=ask_sz,json=askSz,proto3" json:"ask_sz,omitempty"`              // 卖一量
	BidPx      string  `protobuf:"bytes,11,opt,name=bid_px,json=bidPx,proto3" json:"bid_px,omitempty"`              // 买一价
	BidSz      string  `protobuf:"bytes,12,opt,name=bid_sz,json=bidSz,proto3" json:"bid_sz,omitempty"`              // 买一量
	Ts         int64   `protobuf:"varint,13,opt,name=ts,proto3" json:"ts,omitempty"`                                // 时间戳 (毫秒级)
}

func (x *TickerUpdate) Reset() {
	*x = TickerUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickerUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickerUpdate) ProtoMessage() {}

func (x *TickerUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickerUpdate.ProtoReflect.Descriptor instead.
func (*TickerUpdate) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{0}
}

func (x *TickerUpdate) GetInstId() string {
	if x != nil {
		return x.InstId
	}
	return ""
}

func (x *TickerUpdate) GetLastPrice() string {
	if x != nil {
		return x.LastPrice
	}
	return ""
}

func (x *TickerUpdate) GetVol_24H() string {
	if x != nil {
		return x.Vol_24H
	}
	return ""
}

func (x *TickerUpdate) GetVolCcy_24H() string {
	if x != nil {
		return x.VolCcy_24H
	}
	return ""
}

func (x *TickerUpdate) GetHigh_24H() string {
	if x != nil {
		return x.High_24H
	}
	return ""
}

func (x *TickerUpdate) GetLow_24H() string {
	if x != nil {
		return x.Low_24H
	}
	return ""
}

func (x *TickerUpdate) GetOpen_24H() string {
	if x != nil {
		return x.Open_24H
	}
	return ""
}

func (x *TickerUpdate) GetChange_24H() float64 {
	if x != nil {
		return x.Change_24H
	}
	return 0
}

func (x *TickerUpdate) GetAskPx() string {
	if x != nil {
		return x.AskPx
	}
	return ""
}

func (x *TickerUpdate) GetAskSz() string {
	if x != nil {
		return x.AskSz
	}
	return ""
}

func (x *TickerUpdate) GetBidPx() string {
	if x != nil {
		return x.BidPx
	}
	return ""
}

func (x *TickerUpdate) GetBidSz() string {
	if x != nil {
		return x.BidSz
	}
	return ""
}

func (x *TickerUpdate) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

// 批量多个币种的ticker
type TickerBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tickers []*TickerUpdate `protobuf:"bytes,1,rep,name=tickers,proto3" json:"tickers,omitempty"`
}

func (x *TickerBatch) Reset() {
	*x = TickerBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickerBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickerBatch) ProtoMessage() {}

func (x *TickerBatch) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickerBatch.ProtoReflect.Descriptor instead.
func (*TickerBatch) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{1}
}

func (x *TickerBatch) GetTickers() []*TickerUpdate {
	if x != nil {
		return x.Tickers
	}
	return nil
}

// K 线数据 (订阅网关使用)
type WsKlineUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstId     string                   `protobuf:"bytes,1,opt,name=inst_id,json=instId,proto3" json:"inst_id,omitempty"`             // 币种符号
	TimePeriod string                   `protobuf:"bytes,2,opt,name=time_period,json=timePeriod,proto3" json:"time_period,omitempty"` // K 线周期，例如 "15m"
	Confirm    bool                     `protobuf:"varint,3,opt,name=confirm,proto3" json:"confirm,omitempty"`                        // 是否已收盘
	Data       *WsKlineUpdate_KlineData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`                               // K 线详细数据
}

func (x *WsKlineUpdate) Reset() {
	*x = WsKlineUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WsKlineUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WsKlineUpdate) ProtoMessage() {}

func (x *WsKlineUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WsKlineUpdate.ProtoReflect.Descriptor instead.
func (*WsKlineUpdate) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{2}
}

func (x *WsKlineUpdate) GetInstId() string {
	if x != nil {
		return x.InstId
	}
	return ""
}

func (x *WsKlineUpdate) GetTimePeriod() string {
	if x != nil {
		return x.TimePeriod
	}
	return ""
}

func (x *WsKlineUpdate) GetConfirm() bool {
	if x != nil {
		return x.Confirm
	}
	return false
}

func (x *WsKlineUpdate) GetData() *WsKlineUpdate_KlineData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 错误信息 (所有网关通用)
type ErrorMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action string            `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`                                                                                     // "error"
	Data   map[string]string `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 通用数据/键值对错误信息
}

func (x *ErrorMessage) Reset() {
	*x = ErrorMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorMessage) ProtoMessage() {}

func (x *ErrorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorMessage.ProtoReflect.Descriptor instead.
func (*ErrorMessage) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{3}
}

func (x *ErrorMessage) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ErrorMessage) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

// 交易对列表更新 (订阅网关或 Ticker 网关使用)
type InstrumentListUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SortedInstIds []string `protobuf:"bytes,1,rep,name=sorted_inst_ids,json=sortedInstIds,proto3" json:"sorted_inst_ids,omitempty"` // 排序后的 InstID 列表
}

func (x *InstrumentListUpdate) Reset() {
	*x = InstrumentListUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentListUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentListUpdate) ProtoMessage() {}

func (x *InstrumentListUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentListUpdate.ProtoReflect.Descriptor instead.
func (*InstrumentListUpdate) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{4}
}

func (x *InstrumentListUpdate) GetSortedInstIds() []string {
	if x != nil {
		return x.SortedInstIds
	}
	return nil
}

// 币种/交易对元数据更新
type InstrumentUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewInstruments      []string `protobuf:"bytes,1,rep,name=new_instruments,json=newInstruments,proto3" json:"new_instruments,omitempty"`                // 新上架的 InstID 列表
	DelistedInstruments []string `protobuf:"bytes,2,rep,name=delisted_instruments,json=delistedInstruments,proto3" json:"delisted_instruments,omitempty"` // 已下架的 InstID 列表
}

func (x *InstrumentUpdate) Reset() {
	*x = InstrumentUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentUpdate) ProtoMessage() {}

func (x *InstrumentUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentUpdate.ProtoReflect.Descriptor instead.
func (*InstrumentUpdate) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{5}
}

func (x *InstrumentUpdate) GetNewInstruments() []string {
	if x != nil {
		return x.NewInstruments
	}
	return nil
}

func (x *InstrumentUpdate) GetDelistedInstruments() []string {
	if x != nil {
		return x.DelistedInstruments
	}
	return nil
}

// 币种交易所数据
type CryptoExchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code        string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Status      string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	ApiEndpoint string `protobuf:"bytes,5,opt,name=api_endpoint,json=apiEndpoint,proto3" json:"api_endpoint,omitempty"`
	Country     string `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *CryptoExchange) Reset() {
	*x = CryptoExchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoExchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoExchange) ProtoMessage() {}

func (x *CryptoExchange) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoExchange.ProtoReflect.Descriptor instead.
func (*CryptoExchange) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{6}
}

func (x *CryptoExchange) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CryptoExchange) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CryptoExchange) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CryptoExchange) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CryptoExchange) GetApiEndpoint() string {
	if x != nil {
		return x.ApiEndpoint
	}
	return ""
}

func (x *CryptoExchange) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

// 排序列好一组货币id
type SortUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 排序类型
	SortBy string `protobuf:"bytes,1,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	// 使用 repeated 关键字表示一个字符串数组/列表
	SortedInstIds []string `protobuf:"bytes,2,rep,name=sorted_inst_ids,json=sortedInstIds,proto3" json:"sorted_inst_ids,omitempty"`
}

func (x *SortUpdate) Reset() {
	*x = SortUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortUpdate) ProtoMessage() {}

func (x *SortUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortUpdate.ProtoReflect.Descriptor instead.
func (*SortUpdate) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{7}
}

func (x *SortUpdate) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *SortUpdate) GetSortedInstIds() []string {
	if x != nil {
		return x.SortedInstIds
	}
	return nil
}

// 加密货币的标签
type CryptoTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CryptoTag) Reset() {
	*x = CryptoTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoTag) ProtoMessage() {}

func (x *CryptoTag) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoTag.ProtoReflect.Descriptor instead.
func (*CryptoTag) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{8}
}

func (x *CryptoTag) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CryptoTag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CryptoTag) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// 交易数据结构体
type CryptoInstrumentTradingItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentMetadata *CryptoInstrumentMetadata `protobuf:"bytes,1,opt,name=instrument_metadata,json=instrumentMetadata,proto3" json:"instrument_metadata,omitempty"`
	TickerUpdate       *TickerUpdate             `protobuf:"bytes,2,opt,name=ticker_update,json=tickerUpdate,proto3" json:"ticker_update,omitempty"`
}

func (x *CryptoInstrumentTradingItem) Reset() {
	*x = CryptoInstrumentTradingItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoInstrumentTradingItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoInstrumentTradingItem) ProtoMessage() {}

func (x *CryptoInstrumentTradingItem) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoInstrumentTradingItem.ProtoReflect.Descriptor instead.
func (*CryptoInstrumentTradingItem) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{9}
}

func (x *CryptoInstrumentTradingItem) GetInstrumentMetadata() *CryptoInstrumentMetadata {
	if x != nil {
		return x.InstrumentMetadata
	}
	return nil
}

func (x *CryptoInstrumentTradingItem) GetTickerUpdate() *TickerUpdate {
	if x != nil {
		return x.TickerUpdate
	}
	return nil
}

// 一组带有最新价格的币种信息
type CryptoInstrumentTradingArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*CryptoInstrumentTradingItem `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CryptoInstrumentTradingArray) Reset() {
	*x = CryptoInstrumentTradingArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoInstrumentTradingArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoInstrumentTradingArray) ProtoMessage() {}

func (x *CryptoInstrumentTradingArray) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoInstrumentTradingArray.ProtoReflect.Descriptor instead.
func (*CryptoInstrumentTradingArray) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{10}
}

func (x *CryptoInstrumentTradingArray) GetData() []*CryptoInstrumentTradingItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type CryptoInstrumentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InstrumentId   string       `protobuf:"bytes,2,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"`
	ExchangeId     uint32       `protobuf:"varint,3,opt,name=exchange_id,json=exchangeId,proto3" json:"exchange_id,omitempty"`
	BaseCcy        string       `protobuf:"bytes,4,opt,name=base_ccy,json=baseCcy,proto3" json:"base_ccy,omitempty"`
	QuoteCcy       string       `protobuf:"bytes,5,opt,name=quote_ccy,json=quoteCcy,proto3" json:"quote_ccy,omitempty"`
	NameCn         string       `protobuf:"bytes,6,opt,name=name_cn,json=nameCn,proto3" json:"name_cn,omitempty"`
	NameEn         string       `protobuf:"bytes,7,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	Status         string       `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	PricePrecision string       `protobuf:"bytes,9,opt,name=price_precision,json=pricePrecision,proto3" json:"price_precision,omitempty"` // 价格精度
	QtyPrecision   string       `protobuf:"bytes,10,opt,name=qty_precision,json=qtyPrecision,proto3" json:"qty_precision,omitempty"`      // 数量精度
	MarketCap      uint64       `protobuf:"varint,11,opt,name=market_cap,json=marketCap,proto3" json:"market_cap,omitempty"`
	IsContract     bool         `protobuf:"varint,12,opt,name=is_contract,json=isContract,proto3" json:"is_contract,omitempty"`
	Tags           []*CryptoTag `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *CryptoInstrumentMetadata) Reset() {
	*x = CryptoInstrumentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoInstrumentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoInstrumentMetadata) ProtoMessage() {}

func (x *CryptoInstrumentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoInstrumentMetadata.ProtoReflect.Descriptor instead.
func (*CryptoInstrumentMetadata) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{11}
}

func (x *CryptoInstrumentMetadata) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CryptoInstrumentMetadata) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

func (x *CryptoInstrumentMetadata) GetExchangeId() uint32 {
	if x != nil {
		return x.ExchangeId
	}
	return 0
}

func (x *CryptoInstrumentMetadata) GetBaseCcy() string {
	if x != nil {
		return x.BaseCcy
	}
	return ""
}

func (x *CryptoInstrumentMetadata) GetQuoteCcy() string {
	if x != nil {
		return x.QuoteCcy
	}
	return ""
}

func (x *CryptoInstrumentMetadata) GetNameCn() string {
	if x != nil {
		return x.NameCn
	}
	return ""
}

func (x *CryptoInstrumentMetadata) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *CryptoInstrumentMetadata) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CryptoInstrumentMetadata) GetPricePrecision() string {
	if x != nil {
		return x.PricePrecision
	}
	return ""
}

func (x *CryptoInstrumentMetadata) GetQtyPrecision() string {
	if x != nil {
		return x.QtyPrecision
	}
	return ""
}

func (x *CryptoInstrumentMetadata) GetMarketCap() uint64 {
	if x != nil {
		return x.MarketCap
	}
	return 0
}

func (x *CryptoInstrumentMetadata) GetIsContract() bool {
	if x != nil {
		return x.IsContract
	}
	return false
}

func (x *CryptoInstrumentMetadata) GetTags() []*CryptoTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

// --- 通用数据体（服务端 -> 客户端）---
// 这是最终通过 WebSocket 发送给客户端的消息体，包含一个 Oneof 字段
type WebSocketMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 消息的通用类型，用于客户端快速识别
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Types that are assignable to Payload:
	//	*WebSocketMessage_TickerBatch
	//	*WebSocketMessage_Ticker
	//	*WebSocketMessage_KlineUpdate
	//	*WebSocketMessage_SortUpdate
	//	*WebSocketMessage_ErrorMessage
	//	*WebSocketMessage_InstrumentList
	//	*WebSocketMessage_InstrumentStatusUpdate
	//	*WebSocketMessage_InstrumentMetadata
	//	*WebSocketMessage_InstrumentTradingList
	Payload isWebSocketMessage_Payload `protobuf_oneof:"payload"`
}

func (x *WebSocketMessage) Reset() {
	*x = WebSocketMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebSocketMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebSocketMessage) ProtoMessage() {}

func (x *WebSocketMessage) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebSocketMessage.ProtoReflect.Descriptor instead.
func (*WebSocketMessage) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{12}
}

func (x *WebSocketMessage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (m *WebSocketMessage) GetPayload() isWebSocketMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *WebSocketMessage) GetTickerBatch() *TickerBatch {
	if x, ok := x.GetPayload().(*WebSocketMessage_TickerBatch); ok {
		return x.TickerBatch
	}
	return nil
}

func (x *WebSocketMessage) GetTicker() *TickerUpdate {
	if x, ok := x.GetPayload().(*WebSocketMessage_Ticker); ok {
		return x.Ticker
	}
	return nil
}

func (x *WebSocketMessage) GetKlineUpdate() *WsKlineUpdate {
	if x, ok := x.GetPayload().(*WebSocketMessage_KlineUpdate); ok {
		return x.KlineUpdate
	}
	return nil
}

func (x *WebSocketMessage) GetSortUpdate() *SortUpdate {
	if x, ok := x.GetPayload().(*WebSocketMessage_SortUpdate); ok {
		return x.SortUpdate
	}
	return nil
}

func (x *WebSocketMessage) GetErrorMessage() *ErrorMessage {
	if x, ok := x.GetPayload().(*WebSocketMessage_ErrorMessage); ok {
		return x.ErrorMessage
	}
	return nil
}

func (x *WebSocketMessage) GetInstrumentList() *InstrumentListUpdate {
	if x, ok := x.GetPayload().(*WebSocketMessage_InstrumentList); ok {
		return x.InstrumentList
	}
	return nil
}

func (x *WebSocketMessage) GetInstrumentStatusUpdate() *InstrumentUpdate {
	if x, ok := x.GetPayload().(*WebSocketMessage_InstrumentStatusUpdate); ok {
		return x.InstrumentStatusUpdate
	}
	return nil
}

func (x *WebSocketMessage) GetInstrumentMetadata() *CryptoInstrumentMetadata {
	if x, ok := x.GetPayload().(*WebSocketMessage_InstrumentMetadata); ok {
		return x.InstrumentMetadata
	}
	return nil
}

func (x *WebSocketMessage) GetInstrumentTradingList() *CryptoInstrumentTradingArray {
	if x, ok := x.GetPayload().(*WebSocketMessage_InstrumentTradingList); ok {
		return x.InstrumentTradingList
	}
	return nil
}

type isWebSocketMessage_Payload interface {
	isWebSocketMessage_Payload()
}

type WebSocketMessage_TickerBatch struct {
	// 批量更新多个币种的ticker 价格数据
	TickerBatch *TickerBatch `protobuf:"bytes,2,opt,name=ticker_batch,json=tickerBatch,proto3,oneof"`
}

type WebSocketMessage_Ticker struct {
	// 更新1个币种的ticker 价格数据
	Ticker *TickerUpdate `protobuf:"bytes,3,opt,name=ticker,proto3,oneof"`
}

type WebSocketMessage_KlineUpdate struct {
	// 更新k线数据
	KlineUpdate *WsKlineUpdate `protobuf:"bytes,4,opt,name=kline_update,json=klineUpdate,proto3,oneof"`
}

type WebSocketMessage_SortUpdate struct {
	// 更新已排序的币种列表
	SortUpdate *SortUpdate `protobuf:"bytes,5,opt,name=sort_update,json=sortUpdate,proto3,oneof"`
}

type WebSocketMessage_ErrorMessage struct {
	// 错误消息
	ErrorMessage *ErrorMessage `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3,oneof"`
}

type WebSocketMessage_InstrumentList struct {
	// 交易对列表更新，数据是排序过的
	InstrumentList *InstrumentListUpdate `protobuf:"bytes,7,opt,name=instrument_list,json=instrumentList,proto3,oneof"`
}

type WebSocketMessage_InstrumentStatusUpdate struct {
	// 交易对更新，包括上新和下架
	InstrumentStatusUpdate *InstrumentUpdate `protobuf:"bytes,8,opt,name=instrument_status_update,json=instrumentStatusUpdate,proto3,oneof"`
}

type WebSocketMessage_InstrumentMetadata struct {
	// 币种愿数据
	InstrumentMetadata *CryptoInstrumentMetadata `protobuf:"bytes,9,opt,name=instrument_metadata,json=instrumentMetadata,proto3,oneof"`
}

type WebSocketMessage_InstrumentTradingList struct {
	// 包含币种和最新价格的交易信息集合
	InstrumentTradingList *CryptoInstrumentTradingArray `protobuf:"bytes,10,opt,name=instrument_trading_list,json=instrumentTradingList,proto3,oneof"`
}

func (*WebSocketMessage_TickerBatch) isWebSocketMessage_Payload() {}

func (*WebSocketMessage_Ticker) isWebSocketMessage_Payload() {}

func (*WebSocketMessage_KlineUpdate) isWebSocketMessage_Payload() {}

func (*WebSocketMessage_SortUpdate) isWebSocketMessage_Payload() {}

func (*WebSocketMessage_ErrorMessage) isWebSocketMessage_Payload() {}

func (*WebSocketMessage_InstrumentList) isWebSocketMessage_Payload() {}

func (*WebSocketMessage_InstrumentStatusUpdate) isWebSocketMessage_Payload() {}

func (*WebSocketMessage_InstrumentMetadata) isWebSocketMessage_Payload() {}

func (*WebSocketMessage_InstrumentTradingList) isWebSocketMessage_Payload() {}

// 内嵌 K 线详细数据
type WsKlineUpdate_KlineData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // K线起始时间 (毫秒级)
	Open      string `protobuf:"bytes,2,opt,name=open,proto3" json:"open,omitempty"`
	Close     string `protobuf:"bytes,3,opt,name=close,proto3" json:"close,omitempty"`
	High      string `protobuf:"bytes,4,opt,name=high,proto3" json:"high,omitempty"`
	Low       string `protobuf:"bytes,5,opt,name=low,proto3" json:"low,omitempty"`
	Vol       string `protobuf:"bytes,6,opt,name=vol,proto3" json:"vol,omitempty"`                     // 成交量 (币为单位)
	VolCcy    string `protobuf:"bytes,7,opt,name=vol_ccy,json=volCcy,proto3" json:"vol_ccy,omitempty"` // 成交额 (计价币为单位)
}

func (x *WsKlineUpdate_KlineData) Reset() {
	*x = WsKlineUpdate_KlineData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WsKlineUpdate_KlineData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WsKlineUpdate_KlineData) ProtoMessage() {}

func (x *WsKlineUpdate_KlineData) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WsKlineUpdate_KlineData.ProtoReflect.Descriptor instead.
func (*WsKlineUpdate_KlineData) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{2, 0}
}

func (x *WsKlineUpdate_KlineData) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *WsKlineUpdate_KlineData) GetOpen() string {
	if x != nil {
		return x.Open
	}
	return ""
}

func (x *WsKlineUpdate_KlineData) GetClose() string {
	if x != nil {
		return x.Close
	}
	return ""
}

func (x *WsKlineUpdate_KlineData) GetHigh() string {
	if x != nil {
		return x.High
	}
	return ""
}

func (x *WsKlineUpdate_KlineData) GetLow() string {
	if x != nil {
		return x.Low
	}
	return ""
}

func (x *WsKlineUpdate_KlineData) GetVol() string {
	if x != nil {
		return x.Vol
	}
	return ""
}

func (x *WsKlineUpdate_KlineData) GetVolCcy() string {
	if x != nil {
		return x.VolCcy
	}
	return ""
}

var File_market_data_proto protoreflect.FileDescriptor

var file_market_data_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xd9, 0x02, 0x0a, 0x0c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x5f,
	0x32, 0x34, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x32, 0x34,
	0x68, 0x12, 0x1e, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x5f, 0x63, 0x63, 0x79, 0x5f, 0x32, 0x34, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x43, 0x63, 0x79, 0x32, 0x34,
	0x68, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x32, 0x34, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x69, 0x67, 0x68, 0x32, 0x34, 0x68, 0x12, 0x17, 0x0a, 0x07,
	0x6c, 0x6f, 0x77, 0x5f, 0x32, 0x34, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x6f, 0x77, 0x32, 0x34, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x32, 0x34,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x32, 0x34, 0x68,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x32, 0x34, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x32, 0x34, 0x68, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x73, 0x6b, 0x50, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x7a,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x6b, 0x53, 0x7a, 0x12, 0x15, 0x0a,
	0x06, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62,
	0x69, 0x64, 0x50, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x7a, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69, 0x64, 0x53, 0x7a, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x22, 0x41, 0x0a, 0x0b, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x07, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x22, 0xc3,
	0x02, 0x0a, 0x0d, 0x57, 0x73, 0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x57, 0x73, 0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4b, 0x6c,
	0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xa4, 0x01,
	0x0a, 0x09, 0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6f, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x76,
	0x6f, 0x6c, 0x5f, 0x63, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x43, 0x63, 0x79, 0x22, 0x97, 0x01, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3e,
	0x0a, 0x14, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x73, 0x22, 0x6e,
	0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x77,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x64,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x9d,
	0x01, 0x0a, 0x0e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x4d,
	0x0a, 0x0a, 0x53, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x73, 0x22, 0x51, 0x0a,
	0x09, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xb3, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x55, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x5b, 0x0a, 0x1c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xab, 0x03, 0x0a, 0x18, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63,
	0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x43, 0x63,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x63, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x63, 0x79, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x74, 0x79, 0x50, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x63, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x43, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x22, 0xc3, 0x05, 0x0a, 0x10, 0x57, 0x65, 0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0c,
	0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x57, 0x73, 0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0b,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x6f, 0x72,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x57, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x17, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_market_data_proto_rawDescOnce sync.Once
	file_market_data_proto_rawDescData = file_market_data_proto_rawDesc
)

func file_market_data_proto_rawDescGZIP() []byte {
	file_market_data_proto_rawDescOnce.Do(func() {
		file_market_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_market_data_proto_rawDescData)
	})
	return file_market_data_proto_rawDescData
}

var file_market_data_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_market_data_proto_goTypes = []interface{}{
	(*TickerUpdate)(nil),                 // 0: marketdata.TickerUpdate
	(*TickerBatch)(nil),                  // 1: marketdata.TickerBatch
	(*WsKlineUpdate)(nil),                // 2: marketdata.WsKlineUpdate
	(*ErrorMessage)(nil),                 // 3: marketdata.ErrorMessage
	(*InstrumentListUpdate)(nil),         // 4: marketdata.InstrumentListUpdate
	(*InstrumentUpdate)(nil),             // 5: marketdata.InstrumentUpdate
	(*CryptoExchange)(nil),               // 6: marketdata.CryptoExchange
	(*SortUpdate)(nil),                   // 7: marketdata.SortUpdate
	(*CryptoTag)(nil),                    // 8: marketdata.CryptoTag
	(*CryptoInstrumentTradingItem)(nil),  // 9: marketdata.CryptoInstrumentTradingItem
	(*CryptoInstrumentTradingArray)(nil), // 10: marketdata.CryptoInstrumentTradingArray
	(*CryptoInstrumentMetadata)(nil),     // 11: marketdata.CryptoInstrumentMetadata
	(*WebSocketMessage)(nil),             // 12: marketdata.WebSocketMessage
	(*WsKlineUpdate_KlineData)(nil),      // 13: marketdata.WsKlineUpdate.KlineData
	nil,                                  // 14: marketdata.ErrorMessage.DataEntry
}
var file_market_data_proto_depIdxs = []int32{
	0,  // 0: marketdata.TickerBatch.tickers:type_name -> marketdata.TickerUpdate
	13, // 1: marketdata.WsKlineUpdate.data:type_name -> marketdata.WsKlineUpdate.KlineData
	14, // 2: marketdata.ErrorMessage.data:type_name -> marketdata.ErrorMessage.DataEntry
	11, // 3: marketdata.CryptoInstrumentTradingItem.instrument_metadata:type_name -> marketdata.CryptoInstrumentMetadata
	0,  // 4: marketdata.CryptoInstrumentTradingItem.ticker_update:type_name -> marketdata.TickerUpdate
	9,  // 5: marketdata.CryptoInstrumentTradingArray.data:type_name -> marketdata.CryptoInstrumentTradingItem
	8,  // 6: marketdata.CryptoInstrumentMetadata.tags:type_name -> marketdata.CryptoTag
	1,  // 7: marketdata.WebSocketMessage.ticker_batch:type_name -> marketdata.TickerBatch
	0,  // 8: marketdata.WebSocketMessage.ticker:type_name -> marketdata.TickerUpdate
	2,  // 9: marketdata.WebSocketMessage.kline_update:type_name -> marketdata.WsKlineUpdate
	7,  // 10: marketdata.WebSocketMessage.sort_update:type_name -> marketdata.SortUpdate
	3,  // 11: marketdata.WebSocketMessage.error_message:type_name -> marketdata.ErrorMessage
	4,  // 12: marketdata.WebSocketMessage.instrument_list:type_name -> marketdata.InstrumentListUpdate
	5,  // 13: marketdata.WebSocketMessage.instrument_status_update:type_name -> marketdata.InstrumentUpdate
	11, // 14: marketdata.WebSocketMessage.instrument_metadata:type_name -> marketdata.CryptoInstrumentMetadata
	10, // 15: marketdata.WebSocketMessage.instrument_trading_list:type_name -> marketdata.CryptoInstrumentTradingArray
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_market_data_proto_init() }
func file_market_data_proto_init() {
	if File_market_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_market_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickerUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickerBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WsKlineUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentListUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoExchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoInstrumentTradingItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoInstrumentTradingArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoInstrumentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebSocketMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WsKlineUpdate_KlineData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_market_data_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*WebSocketMessage_TickerBatch)(nil),
		(*WebSocketMessage_Ticker)(nil),
		(*WebSocketMessage_KlineUpdate)(nil),
		(*WebSocketMessage_SortUpdate)(nil),
		(*WebSocketMessage_ErrorMessage)(nil),
		(*WebSocketMessage_InstrumentList)(nil),
		(*WebSocketMessage_InstrumentStatusUpdate)(nil),
		(*WebSocketMessage_InstrumentMetadata)(nil),
		(*WebSocketMessage_InstrumentTradingList)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_market_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_market_data_proto_goTypes,
		DependencyIndexes: file_market_data_proto_depIdxs,
		MessageInfos:      file_market_data_proto_msgTypes,
	}.Build()
	File_market_data_proto = out.File
	file_market_data_proto_rawDesc = nil
	file_market_data_proto_goTypes = nil
	file_market_data_proto_depIdxs = nil
}
